<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angularjs | Coding Experience]]></title>
  <link href="http://thaiat.github.io/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://thaiat.github.io/"/>
  <updated>2014-03-23T19:45:19+02:00</updated>
  <id>http://thaiat.github.io/</id>
  <author>
    <name><![CDATA[Avi Haiat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automatic retry on exception in angular]]></title>
    <link href="http://thaiat.github.io/blog/2014/03/23/automatic-retry-on-exception-in-angular/"/>
    <updated>2014-03-23T15:01:11+02:00</updated>
    <id>http://thaiat.github.io/blog/2014/03/23/automatic-retry-on-exception-in-angular</id>
    <content type="html"><![CDATA[<p>Every so often, you run across some action, which just fails, where the best response it to just try it again. This is particularly true when dealing with an external source, like a database or web service, which can have network or other temporary problems, which would have cleared up when you repeat the call seconds later.</p>

<p>Often, these actions fail by throwing an exception which makes the process of trying the call again rather cumbersome. Having to deal with this a number of times in one application, I decided to wrap the full procedure up in an angular service, which I share here with you:</p>

<h2>Sleep function</h2>

<p>First we need to implement a <code>sleep</code> function, that will just wait for a specified interval of milliseconds while returning a promise.</p>

<p>You would think that the best fit is to use <code>$timeout</code>.  <br/>
The problem is, it has a bad impact on your unit tests&hellip;.
The reason is, if you use <code>$timeout</code>, you will have at the end of your test to call <code>$timeout.flush()</code> as many times as <code>$timeout</code> was called in your implementation.</p>

<p>Instead, if we use the standard javascript <code>setTimeout</code> function, we only have to call once <code>$rootScope.$apply()</code> at the end of our test and we&rsquo;re done.</p>

<p>Let&rsquo;s start by defining our service with an empty implementation:
In addition to <code>sleep</code>, we will expose 2 other functions <code>toAsync</code> and <code>retry</code>, that we&rsquo;ll explain later.</p>

<p>```javascript promiseService.js
var app = angular.module(&ldquo;myApp&rdquo;, []);</p>

<p>var dependencies = [&lsquo;$q&rsquo;, &lsquo;$rootScope&rsquo;];
var service = function($q, $rootScope) {</p>

<pre><code>var sleep = function() {

};

var toAsync = function(){

};

var retry = function() {

};

return {
    sleep : sleep,
    toAsync : toAsync,
    retry : retry
}   
</code></pre>

<p>};</p>

<p>app.factory(&ldquo;promiseService&rdquo;, dependencies.concat(service));
```</p>

<p>For the implementation of <code>sleep</code> we are going to generate our own promise, call <code>setTimeout</code>, and not forget to wrap the callback in a <code>$rootScope.$apply()</code> call.</p>

<p>```javascript sleep function
var sleep = function(interval) {</p>

<pre><code>// check parameter
if(!(interval === parseFloat(interval)) || interval &lt; 0)
    throw new Error("interval must be a positive float");

var deferred = $q.defer();

// sleep
setTimeout(function () {
    $rootScope.$apply(function () {
        deferred.resolve(interval);
    });
}, interval);

return deferred.promise;
</code></pre>

<p>};
```</p>

<p>Before we continue, let&rsquo;s write some unit tests to verify the implementation.
I&rsquo;m using here <strong>jasmine 2.0</strong> which comes with a new syntax for async testing. <br/>
It&rsquo;s pretty simple : when testing an async function (aka a promise), you add a <code>done</code> parameter to your <code>it</code>, and you call <code>done()</code> when the promise returns some result.
In addition, if your implementation uses setTimeout, you add a call to <code>$rootScope.$apply()</code></p>

<p>```javascript promiseService.tests.js
describe(&ldquo;Service : promiseService&rdquo; , function() {</p>

<pre><code>var service;
var $rootScope;
var $httpbackend;
var $http;

beforeEach(module("myApp"));

beforeEach(inject(function ($injector) {
    service = $injector.get("promiseService");
    $timeout = $injector.get("$timeout");
    $rootScope = $injector.get("$rootScope");
    $httpBackend = $injector.get("$httpBackend");
    $http = $injector.get("$http");
}));

it("should_be_defined", function(){
    expect(service).toBeDefined();
});

it("sleep_with_not_integer_interval_should_throw_exception", function () {
    expect(function () {
        service.sleep("invalid");
    }).toThrow(new Error("interval must be a positive float"));
});

it("sleep_with_not_positive_integer_interval_should_throw_exception", function () {
    expect(function () {
        service.sleep(-2);
    }).toThrow(new Error("interval must be a positive float"));
});

it("sleep_with_positive_integer_interval_should_succeed", function (done) {
    var interval = 100;
    service.sleep(interval).then(function (result) {
        expect(result).toEqual(interval);
        done();
    });
    $rootScope.$apply();
});
</code></pre>

<p>});</p>

<p>```</p>

<p>We have a fully tested <code>sleep</code> function.</p>

<h2>toAsync function</h2>

<p>The next function that we need to write is a function that will transform a passed function into a promise.
That way we can retry on fail, either standard functions, or promises.
The trick here, if you want your unit test to pass, is to encapsulate the call to the passed function in a try catch block.
It is similar to <code>$q.when</code>, but instead of passing a value or a promise, we pass a function or a promise.
```javascript toAsync
 var toAsync = function (action) {</p>

<pre><code>if (typeof action !== "function") {
    throw new Error("action must be a function");
}
var deferred = $q.defer();
try {
    var retval = action();
    deferred.resolve(retval);

}
catch (ex) {
    deferred.reject(ex);
}
return deferred.promise;
</code></pre>

<p>};
```</p>

<p>And the unit tests :
```javascript toAsync unit tests
it(&ldquo;toAsync_with_invalid_parameter_function_should_throw_exception&rdquo;, function () {</p>

<pre><code>expect(function () {
    service.toAsync("invalid");
}).toThrow(new Error("action must be a function"));
</code></pre>

<p>});</p>

<p>it(&ldquo;toAsync_with_valid_sync_function_should_succeed&rdquo;, function (done) {</p>

<pre><code>spyOn(mockHelper, 'addOne').and.callThrough();
var action = function () {
    return mockHelper.addOne(100);
};

service.toAsync(action).then(function (result) {
    expect(result).toBe(101);
    expect(mockHelper.addOne).toHaveBeenCalledWith(100);
    done();
});
$rootScope.$apply();
</code></pre>

<p>});</p>

<p>it(&ldquo;toAsync_with_valid_async_function_should_succeed&rdquo;, function (done) {</p>

<pre><code>spyOn(mockHelper, 'getUrl').and.callThrough();
$httpBackend.when('GET', '/dummy').respond(mockHelper.dummyResponse);
var action = function () {
    return mockHelper.getUrl();
};
service.toAsync(action).then(function (result) {
    expect(mockHelper.getUrl).toHaveBeenCalled();
    expect(result.data).toEqual(mockHelper.dummyResponse);
    done();
});

$httpBackend.flush();
$rootScope.$apply();
</code></pre>

<p>});</p>

<p>it(&ldquo;toAsync_with_faulty_sync_function_should_succeed&rdquo;, function (done) {</p>

<pre><code>spyOn(mockHelper, 'faultyFn').and.callThrough();
var action = function () {
    return mockHelper.faultyFn();
};
service.toAsync(action).then(null, function (rejection) {
    expect(mockHelper.faultyFn).toHaveBeenCalled();
    expect(rejection.message).toBe("I'm a faulty function");
    done();
});
$rootScope.$apply();
</code></pre>

<p>});</p>

<p>var mockHelper = {</p>

<pre><code>faultyFn : function () {
    throw new Error("I'm a faulty function");
},

addOne : function (value) {
    return value + 1;
},

getUrl: function () {
    return $http.get("/dummy");
},

dummyResponse : {
    "id" : 1,
    "content" : "Hello World"
}
</code></pre>

<p>};
```</p>

<p>The <code>mockHelper</code> object holds our unit test functions, so we can reuse and spy on them across the tests.
This is usefull for checking how many times they are called and with which parameters.</p>

<h2>retry function</h2>

<p>This is the last piece of the puzzle.
To be as generic as possible, our function will accept a set of parameters in order to control how many times we should retry on fail, the interval between each trial, and also an interval multiplicator if we want to add some extra delay between each trial.</p>

<p>The implementation is straight forward, using the building blocks we previously wrote.
In the first part we just do some argument checking, and assign default values.
In the second part, we recursivly call resolver, which, execute the passed action, and if an expection is detected, do a <code>sleep</code> and retry.</p>

<p>```javascript retry function
var retry = function (action, options) {</p>

<pre><code>retry.DEFAULT_OPTIONS = {
    maxRetry : 3,
    interval : 500,
    intervalMultiplicator : 1.5
};

if (typeof action !== "function") {
    throw new Error("action must be a function");
}
if (!options) {
    options = retry.DEFAULT_OPTIONS;
}
else {
    for (var k in retry.DEFAULT_OPTIONS) {
        if (retry.DEFAULT_OPTIONS.hasOwnProperty(k) &amp;&amp; !(k in options)) {
            options[k] = retry.DEFAULT_OPTIONS[k];
        }
    }
}

var resolver = function(remainingTry, interval) {
    var result = toAsync(action);
    if (remainingTry &lt;= 1) {
        return result;
    }
    return result.catch(function (e) {
        return sleep(interval).then(function () {
            // recursion
            return resolver(remainingTry - 1, interval * options.intervalMultiplicator);
        });
    });
}
return resolver(options.maxRetry, options.interval);
</code></pre>

<p>};
```</p>

<p>Here are the unit tests:
```javascript retry function unit tests
it(&ldquo;retry_with_invalid_parameter_function_should_throw_exception&rdquo;, function () {</p>

<pre><code>expect(function () {
    service.retry("invalid");
}).toThrow(new Error("action must be a function"));
</code></pre>

<p>});</p>

<p>it(&ldquo;retry_with_faulty_sync_function_should_succeed&rdquo;, function (done) {</p>

<pre><code>spyOn(mockHelper, 'faultyFn').and.callThrough();
var action = function () {
    return mockHelper.faultyFn();
};
var promise = service.retry(action);
promise.then(null, function (rejection) {
    expect(mockHelper.faultyFn).toHaveBeenCalled();
    expect(mockHelper.faultyFn.calls.count()).toBe(3);
    expect(rejection.message).toBe("I'm a faulty function");
    done();
});
$rootScope.$apply();
</code></pre>

<p>});</p>

<p>it(&ldquo;retry_with_faulty_sync_function_and_options_should_succeed&rdquo;, function (done) {</p>

<pre><code>spyOn(mockHelper, 'faultyFn').and.callThrough();
var action = function () {
    return mockHelper.faultyFn();
};
var promise = service.retry(action, {maxRetry : 5});
promise.then(null, function (rejection) {

    expect(mockHelper.faultyFn).toHaveBeenCalled();
    expect(mockHelper.faultyFn.calls.count()).toBe(5);
    expect(rejection.message).toBe("I'm a faulty function");
    done();
});
$rootScope.$apply();
</code></pre>

<p>});</p>

<p>it(&ldquo;retry_with_valid_sync_function_should_succeed&rdquo;, function (done) {</p>

<pre><code>spyOn(mockHelper, 'addOne').and.callThrough();
var action = function () {
    return mockHelper.addOne(100);
};
var promise = service.retry(action);
promise.then(function (result) {
    expect(result).toBe(101);
    expect(mockHelper.addOne).toHaveBeenCalled();
    expect(mockHelper.addOne.calls.count()).toBe(1);
    done();
});
$rootScope.$apply();
</code></pre>

<p>});</p>

<p>it(&ldquo;retry_with_valid_async_function_should_succeed&rdquo;, function (done) {</p>

<pre><code>spyOn(mockHelper, 'getUrl').and.callThrough();
$httpBackend.when('GET', '/dummy').respond(mockHelper.dummyResponse);
var action = function () {
    return mockHelper.getUrl();
};
var promise = service.retry(action);
promise.then(function (result) {
    expect(mockHelper.getUrl).toHaveBeenCalled();
    expect(result.data).toEqual(mockHelper.dummyResponse);
    done();
});
$httpBackend.flush();
$rootScope.$apply();
</code></pre>

<p>});
```</p>

<p>That&rsquo;s it. Our service is fully unit tested (100% coverage!!!), and we can reuse it anywhere in our applications.</p>

<p>The repository is available <a href="https://github.com/thaiat/angular-retry">here</a>.</p>

<p>Let me know what you think and happy coding.</p>

<p>Avi Haiat</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending an existing directive in angularjs]]></title>
    <link href="http://thaiat.github.io/blog/2014/03/10/extending-an-existing-directive-in-angularjs/"/>
    <updated>2014-03-10T12:12:32+02:00</updated>
    <id>http://thaiat.github.io/blog/2014/03/10/extending-an-existing-directive-in-angularjs</id>
    <content type="html"><![CDATA[<p>Working example : <a href="http://thaiat.github.io/angular-extending-directive/">http://thaiat.github.io/angular-extending-directive/</a></p>

<p>Let&rsquo;s say you have a third party angularjs directive that you want to extend or simply access the api defined by its controller. <br/>
We could use <code>require</code> but that means that we have to put the 2 directives on the same element, or that the extended directive should be contained inside the first one (looks weird), because require will look up the chain of html.</p>

<p>Well&hellip; this is not always possible as we do not have control on the code defining the first directive. It could restrict its usage to &lsquo;E&rsquo;, meaning that our extended directive cannot be anymore retricted to &lsquo;E&rsquo;.</p>

<p>How can we easily do that, and in a more natural way meaning the extended directive should wrap the first directive ?</p>

<p>Let&rsquo;s first start with some simple html</p>

<p>```html index.html
<html></p>

<pre><code>&lt;head&gt;
    &lt;title&gt;angular-extending-directive&lt;/title&gt;
    &lt;style type="text/css"&gt;
   .circle {
        border: 1px black solid;
        text-align: center;
        padding: 4px;
        font-size: 40px;
        border-radius: 50px;
        -moz-border-radius: 50px;
        border-radius: 50%;
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        cursor: pointer;
    }
     .counter {
        width: 50px;
        height: 50px;
        background-color: green;         
    }
    &lt;/style&gt;
    &lt;script type="text/javascript" src="bower_components/angular/angular.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="scripts/app.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body ng-app="myApp"&gt;
    &lt;h1&gt;counter&lt;/h1&gt; 
    &lt;counter&gt;&lt;/counter&gt;

&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>We are defining a counter directive with some minimal css.</p>

<p>Our <strong>counter</strong> directive should display a number, starting at 0, and increment it each time we click on it.
Most of the chances are that this third party directive will use an isolate scope.</p>

<p>Again this is pretty simple, and here is the code.</p>

<p>```javascript scripts/app.js
var myApp = angular.module(&lsquo;myApp&rsquo;, []);
myApp.directive(&lsquo;counter&rsquo;, function () {
  return {</p>

<pre><code>scope: {},
controller: function ($scope, $element, $attrs, $transclude) {
  $scope.value = 0;
  $scope.increment = function () {
    $scope.value += 1;

  };
},

link: function (scope, iElm, iAttrs, controller) {
  iElm.on('click', function (e) {
    e.stopPropagation();
    scope.$apply(function () {
      console.log('click counter');
      scope.increment();
    });
  });
},
restrict: 'E',
template: '&lt;div class="circle counter"&gt;&lt;/div&gt;'
</code></pre>

<p>  };
});
```</p>

<p>The directive presents a circle with a number in it. Each time you click it will increment the number.</p>

<p>Now we want to use this existing directive but extend its behavior.
For the matter of the explanation, let&rsquo;s create a new directive called <strong>wrappercounter</strong> that wraps it into a wider circle, and when will click on it, it should log a console message.</p>

<p>The html for this new directive should be:</p>

<p>```html index.html</p>

<h1>wrapcounter</h1>


<p>
<wrapcounter>
  <counter></counter>
</wrapcounter>
```</p>

<p>and to please our eyes we can add the following css</p>

<p>```css index.html
.wrapcounter {</p>

<pre><code>width: 100px;
height: 100px;
background-color: red;
box-pack: center;
box-align: center;
display: flex;
flex-direction: row;
flex-wrap: wrap;
justify-content: center;
align-items: center;
cursor: pointer;
</code></pre>

<p>}
```</p>

<p>Depending on how the first directive <strong>counter</strong> was written we have 3 ways to achieve this.</p>

<h2>1st way : element.isolateScope</h2>

<p>If the first directive controller uses $scope (like above) we have to retreive the inner element, and the api declared by the scope will be available through <code>element.isolateScope()</code>.</p>

<p>```javascript scripts/app.js
myApp.directive(&lsquo;wrapcounter&rsquo;, function () {
  return {</p>

<pre><code>restrict: 'E',
transclude: true,
template: '&lt;div class="circle wrapcounter" ng-transclude&gt;&lt;/div&gt;',
link: function (scope, iElm, iAttrs, controller) {
  // retreive the inner directive element
  var counter = iElm.find('counter')[0];

  var innerScope = angular.element(counter).isolateScope();

  iElm.on('click', function (e) {
    e.stopPropagation();
    scope.$apply(function () {
      // decorating the increment function with a console log.
      console.log('click wrapper');
      // accessing the inner directive api
      innerScope.increment();

    });
  });
}
</code></pre>

<p>  };</p>

<p>});</p>

<p>```</p>

<h2>2nd way : element.controller(name)</h2>

<p>This only works if the controller of the first directive uses the <em>this (or controllerAs)</em> syntax.
Let&rsquo;s modify the first directive</p>

<p>```javascript scripts/app.js
myApp.directive(&lsquo;counter&rsquo;, function () {
  return {</p>

<pre><code>scope: {},
controller: function ($scope, $element, $attrs, $transclude) {
  var vm = this;
  vm.value = 0;
  vm.increment = function () {
    vm.value += 1;
  };
},
controllerAs: 'vm',
link: function (scope, iElm, iAttrs, controller) {
  iElm.on('click', function (e) {
    e.stopPropagation();
    scope.$apply(function () {
      console.log('click counter');
      scope.vm.increment();
    });
  });
},
restrict: 'E',
template: '&lt;div class="circle counter"&gt;&lt;/div&gt;'
</code></pre>

<p>  };
});
```</p>

<p>And now the second directive</p>

<p>```javascript scripts/app.js
myApp.directive(&lsquo;wrapcounter&rsquo;, function () {
  return {</p>

<pre><code>restrict: 'E',
transclude: true,
template: '&lt;div class="circle wrapcounter" ng-transclude&gt;&lt;/div&gt;',
link: function (scope, iElm, iAttrs, controller) {
  // retreive the inner directive element
  var counter = iElm.find('counter')[0];

  // retreive the inner controller
  var innerController = angular.element(counter).controller('counter');

  iElm.on('click', function (e) {
    e.stopPropagation();
    scope.$apply(function () {
      // decorating the increment function with a console log.
      console.log('click wrapper');
      // accessing the inner directive api
      innerController.increment();

    });
  });
}
</code></pre>

<p>  };</p>

<p>});
```</p>

<h3>3rd way : element.data</h3>

<p>Looking at the angluarjs source code we see this piece of code:</p>

<p>```javascript angular.js
if (!hasElementTranscludeDirective) {</p>

<pre><code> $element.data('$' + directive.name + 'Controller', controllerInstance);
</code></pre>

<p>}
```</p>

<p>So we can use this to get access to the controller:
```javascript scripts/app.js
myApp.directive(&lsquo;wrapcounter&rsquo;, function () {
  return {</p>

<pre><code>restrict: 'E',
transclude: true,
template: '&lt;div class="circle wrapcounter" ng-transclude&gt;&lt;/div&gt;',
link: function (scope, iElm, iAttrs, controller) {
  // retreive the inner directive element
  var counter = iElm.find('counter')[0];

  // retreive the inner controller
  var innerController = angular.element(counter).data('$' + 'counter' + 'Controller');

  iElm.on('click', function (e) {
    e.stopPropagation();
    scope.$apply(function () {
      // decorating the increment function with a console log.
      console.log('click wrapper');
      // accessing the inner directive api
      innerController.increment();

    });
  });
}
</code></pre>

<p>  };</p>

<p>});
```</p>

<p>As you see in any case we have access to the api defined by the inner directive. We could change it, decorate or override existing functions, add our own functions if some are missing from the inner directive, etc&hellip;</p>

<p>Hope this makes sense&hellip;</p>

<p>Git repo : <a href="https://github.com/thaiat/angular-extending-directive/tree/master/scripts">https://github.com/thaiat/angular-extending-directive/tree/master/scripts</a></p>

<p>Let me know what you think and happy coding.</p>

<p>Avi Haiat</p>

<p>PS: Big thanks to Nir Kaufman that helped me figure it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angularjs and Requirejs for very large applications]]></title>
    <link href="http://thaiat.github.io/blog/2014/02/26/angularjs-and-requirejs-for-very-large-applications/"/>
    <updated>2014-02-26T10:14:06+02:00</updated>
    <id>http://thaiat.github.io/blog/2014/02/26/angularjs-and-requirejs-for-very-large-applications</id>
    <content type="html"><![CDATA[<blockquote><p><strong>NOTE:</strong> <br/>
This article assumes that you are familiar with both <code>requirejs</code> and <code>angularjs</code></p></blockquote>

<p>Live demo is available here : <a href="http://thaiat.github.io/directory-angular-ionic-require">http://thaiat.github.io/directory-angular-ionic-require</a></p>

<p>Hi all,</p>

<p>I&rsquo;ve been working with <code>angularjs</code> for the past 3 months.</p>

<p>I like very much the framework, but i had a few issues with what would be the best way to organize the code when writing a large application. Especially i didn&rsquo;t like editing the index.html each time i would write a new directive, controller or service. So i looked at <code>requirejs</code> and started to think how the 2 libraries would play together.</p>

<p>In a nutshell here is my attempt to combine both <code>angularjs</code> and <code>requirejs</code>. <br/>
Some may argue that this is unnecessary, but i wanted to explain my approach and see what is the feedback. <br/>
The main reason i needed that is that i&rsquo;m still using Visual Studio as my editor (yes&hellip; i know&hellip;).
Running the unit test with jasmine in Visual Studio works without an html page, so i needed a way with pure javascript files to link together all my unit tests. <code>requirejs</code> does exactly that&hellip;</p>

<p>So, first, let&rsquo;s see the file structure.</p>

<h2>File and folder structure</h2>

<p>As per the best practices in angular, i wanted to organize my code by features. <br/>
So the folder structure looks like this:</p>

<p>```bat folder structure
index.html
scripts/
   main.js <br/>
   app/</p>

<pre><code>  area1/   
  area2/   
</code></pre>

<p>   libs/</p>

<pre><code>  angular/   
  ionic/   
  require/   
</code></pre>

<p>styles/
   font-awesome/
   main.css  <br/>
```</p>

<p>At the root we have scripts and styles, nothing surprising there.
In the subfolder <code>scripts/libs</code>, i usually put all the external javascript libraries. <br/>
I like to create a subfolder underneath which is named as the current version number of the library (x.y.z).</p>

<p>For example:
```bat folder structure
libs/
   angular/</p>

<pre><code>  1.2.9/
       angular-animate.js
       angular-animate.min.js
       angular-cookies.js
       .....
</code></pre>

<p>```</p>

<p>This makes it super easy to try a new version of the library and see if it works, while falling back to the previous one if the new version generates too many bugs.</p>

<p>Right at the root we have the <code>index.html</code>. <br/>
Here is the code:
```html index.html
<html></p>

<pre><code>&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
    &lt;link href="styles/main.css" rel="stylesheet" /&gt;

    &lt;title&gt;Hello World&lt;/title&gt;

&lt;/head&gt;

&lt;body&gt;

    &lt;script src="scripts/libs/require/2.1.10/require.js" data-main="scripts/main"&gt; &lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>As you can see it is also very simple. <br/>
It references the needed css, and has only a single script tag, pointing to <code>requirejs</code> and defining <code>scripts/main.js</code> as the entry point for the application.</p>

<blockquote><p><strong>NOTE:</strong> <br/>
Note that the <code>.js</code> extension is omitted when referencing a javascript file with <code>requirejs</code></p></blockquote>

<h3>main.js</h3>

<p>This file first defines the libraries needed by the application. We will see later on how we start the application using require entry point function.</p>

<p>So for the moment the content is pretty simple:
```javascript scripts/main.js
require.config({</p>

<pre><code>  paths : {
    'angular' : 'libs/angular/1.2.9/angular',
    'angularUiRouter' : 'libs/angular/angular-ui/0.2.8/angular-ui-router',
    'angularSanitize' : 'libs/angular/1.2.9/angular-sanitize',
    'angularAnimate' : 'libs/angular/1.2.9/angular-animate'

},
shim : {
    'angular' : {
        exports : 'angular'
    },
    'angularUiRouter' : {
        deps : ['angular']
    },
    'angularAnimate' : {
        deps : ['angular']
    },
    'angularSanitize' : {
        deps : ['angular']
    }

}
</code></pre>

<p>});</p>

<p>```</p>

<h3>feature folder</h3>

<p>For the purpose of the explanation let&rsquo;s call this feature folder <code>area</code>. <br/>
Before we review how we can start the application, let&rsquo;s first see how a feature is organized.</p>

<p>For each feature we will define a folder containing the following:</p>

<h4>area/namespace.js</h4>

<p>This file is a returning the namespace of the feature.
```javascript scripts/app/area/namespace.js
define([], function () {</p>

<pre><code>'use strict';
return "area";
</code></pre>

<p>});
```</p>

<p>Note that I usually put in the app folder a root namespace looking like this:
```javascript scripts/app/namespace.js
define([], function () {</p>

<pre><code>return "myApp";
</code></pre>

<p>});
```</p>

<p>In the namespace.js of a specific feature i can require this top root namespace to chain the namespaces.
area/namespace.js becomes:
```javascript scripts/app/area/namespace.js
define([</p>

<pre><code>'../namespace'  // we are requiring here the top root namespace
</code></pre>

<p>], function (namespace) {</p>

<pre><code>'use strict';
return namespace + ".area";
</code></pre>

<p>});
```</p>

<p>I find this elegant because the actual name of the namespace are only hard coded once. I could decide later on to change the namespace and this will not impact any other part of the application&hellip;</p>

<p>Next to namespace.js we define 2 others files : <code>module.js</code> and <code>module.require.js</code>. <br/>
<code>module.js</code> simply defines a specific module for the feature:</p>

<p>```javascript scripts/app/area/module.js
define([</p>

<pre><code>    'angular',
    './namespace'
</code></pre>

<p>],</p>

<pre><code>function (angular, namespace) {
    'use strict';

    return angular.module(namespace, []);

});
</code></pre>

<p>```</p>

<p>See how we reference the namespace for the feature instead of duplicating the hard coded namespace.</p>

<p><code>module.require.js</code> is the file responsible for binding together all the files we will put in our feature module (filters, directives, services, controllers, etc&hellip;) <br/>
To achieve a clean separation between those files, we will create sub folders per nature inside the feature folder:</p>

<p><code>bat flder structure
configs/
constants/
controllers/
directives/
filters/
services/
templates/
</code></p>

<p>Each of these sub folders contains a file per component, plus an <code>_index.js</code> file referencing all of them. <br/>
To better understand let see how the services folder looks like:</p>

<h4>area/services/_index.js</h4>

<p>```javascript scripts/app/area/services/_index.js
define([</p>

<pre><code>'./myService'
</code></pre>

<p>], function () {</p>

<pre><code>'use strict';
</code></pre>

<p>});
```</p>

<h4>area/services/myService.js</h4>

<p>```javascript scripts/app/area/services/myService.js
define([</p>

<pre><code>    '../module',
    '../namespace'
],
function (module, namespace) {
    'use strict';

    var name = namespace + ".myService";
    var dependencies = ['$log'];
    var service = function ($log) {
        return {
            add : function (v1, v2) {
                $log.debug("add function");
                return v1 + v2;
            }

        };
    };

    module.factory(name, dependencies.concat(service));
});
</code></pre>

<p>```</p>

<p>Note that we are again referencing the namespace in order to prefix the name of the service with it. <br/>
If you do not want your service to be in a specific namespace you can just ignore that and write:
<code>javascript
var name = "myService"; // instead of var name = namespace + ".myService";
</code></p>

<h4>area/module.require.js</h4>

<p>This file simply references all the _index.js per component type</p>

<p>```javascript scripts/app/area/module.require.js
define([</p>

<pre><code>'./configs/_index',
'./constants/_index',
'./controllers/_index',
'./directives/_index',
'./filters/_index',
'./services/_index'
</code></pre>

<p>], function () {</p>

<pre><code>'use strict';
</code></pre>

<p>});
```</p>

<p>Now lets starts our application.
We will need an app.js file in <code>scripts/app</code>
```javascript scripts/app/app.js
define([</p>

<pre><code>    'angular',
    './namespace',
    './area/namespace',

    './area/module.require'
],
function (angular, namespace, namespaceArea) {
    'use strict';

    var app = angular.module(namespace, [
        namespaceArea
    ]).run(function () {
        //
    });
    return app;
});
</code></pre>

<p>```</p>

<p>We are requiring the feature <code>module.require.js</code> file to make sure all the files making the feature are loaded. And in addition we are also referencing the namespace of the application and the namespace of the feature in order to prevent hard coding again their values.</p>

<p>The only thing left is to bind <code>main.js</code> with <code>app.js</code> using the following code
at the end of <code>main.js</code></p>

<p>```javascript scripts/main.js
require([</p>

<pre><code>    'angular',
    'app/namespace',
    'app/app'
],
function (angular, namespace) {
    angular.element(document).ready(function() {
         angular.bootstrap(document, [namespace]);
   });
});
</code></pre>

<p>```</p>

<p>This may seem over complicated, but once you understand how it works it is really easy to expand.
Each time i need a new &ldquo;feature&rdquo;, i&rsquo;m copying a dummy feature structure, set the namespace, and reference the module.require of the feature in the main <code>app.js</code>.
Whenever i need a new component inside the feature, i put it in the correct location based on its type, and edit the corresponding <code>_index.js</code>.</p>

<p>To better illustrate these concepts you can look at this <a href="https://github.com/thaiat/directory-angular-ionic-require">repository</a>. <br/>
Live demo is available here : <a href="http://thaiat.github.io/directory-angular-ionic-require">http://thaiat.github.io/directory-angular-ionic-require</a></p>

<p>I have re-written the Sample Mobile Application of Christophe Coenraets using these technics (see <a href="http://coenraets.org/blog/2014/02/sample-mobile-application-with-ionic-and-angularjs/">http://coenraets.org/blog/2014/02/sample-mobile-application-with-ionic-and-angularjs/</a>)</p>

<p>Let me know what you think and happy coding.</p>

<p>Avi Haiat</p>
]]></content>
  </entry>
  
</feed>
